/**
 * name: @tresjs/core
 * version: v4.3.3
 * (c) 2025
 * description: Declarative ThreeJS using Vue Components
 * author: Alvaro Saburido <hola@alvarosaburido.dev> (https://github.com/alvarosabu/)
 */
var Et = Object.defineProperty;
var Tt = (e, t, n) => t in e ? Et(e, t, { enumerable: !0, configurable: !0, writable: !0, value: n }) : e[t] = n;
var he = (e, t, n) => Tt(e, typeof t != "symbol" ? t + "" : t, n);
import { defineComponent as fe, withAsyncContext as nt, reactive as Se, renderSlot as rt, unref as W, ref as I, computed as q, watchEffect as Ae, onUnmounted as K, shallowRef as $, watch as ae, readonly as we, provide as le, inject as St, isRef as At, useSlots as xt, getCurrentInstance as He, onMounted as kt, createElementBlock as Lt, openBlock as Rt, normalizeStyle as Ot, normalizeClass as Dt, createRenderer as jt, h as Ue, Fragment as Bt } from "vue";
import * as ot from "three";
import { Scene as st, MathUtils as it, Vector3 as xe, MeshBasicMaterial as at, DoubleSide as It, TextureLoader as $t, PerspectiveCamera as be, Camera as Ht, Clock as lt, REVISION as Ut, Color as Z, NoToneMapping as Ft, PCFSoftShadowMap as Wt, ACESFilmicToneMapping as ct, SRGBColorSpace as Nt, WebGLRenderer as ge, Vector2 as ve, Raycaster as zt, Object3D as Gt, BufferAttribute as Vt, ArrowHelper as Yt, Line as qt, BufferGeometry as Fe, Float32BufferAttribute as We, LineBasicMaterial as Kt, Mesh as Jt, BackSide as Qt, HemisphereLightHelper as Xt, SpotLightHelper as Zt, PointLightHelper as en, DirectionalLightHelper as tn } from "three";
import { tryOnScopeDispose as nn, toValue as A, unrefElement as rn, useDevicePixelRatio as on, useWindowSize as sn, useElementSize as an, refDebounced as Ne, usePointer as ln, useElementBounding as cn, createEventHook as D, useFps as un, useMemory as fn, useRafFn as ut } from "@vueuse/core";
const dn = "@tresjs/core", pn = "module", mn = "4.3.3", hn = "pnpm@9.15.5", gn = "Declarative ThreeJS using Vue Components", vn = "Alvaro Saburido <hola@alvarosaburido.dev> (https://github.com/alvarosabu/)", yn = "MIT", _n = { type: "git", url: "git+https://github.com/Tresjs/tres.git" }, wn = ["vue", "3d", "threejs", "three", "threejs-vue"], bn = !1, Mn = { ".": { types: "./dist/index.d.ts", import: "./dist/tres.js", require: "./dist/tres.umd.cjs" }, "./components": { types: "./dist/src/components/index.d.ts" }, "./composables": { types: "./dist/src/composables/index.d.ts" }, "./types": { types: "./dist/src/types/index.d.ts" }, "./utils": { types: "./dist/src/utils/index.d.ts" }, "./*": "./*" }, Pn = "./dist/tres.js", Cn = "./dist/tres.js", En = "./dist/index.d.ts", Tn = ["*.d.ts", "dist"], Sn = { access: "public" }, An = { dev: "pnpm --filter='./playground/vue' dev", "dev:nuxt": "pnpm --filter='./playground/nuxt' dev", build: "vite build", test: "vitest", "test:ci": "vitest run", "test:ui": "vitest --ui --coverage.enabled=true", release: "release-it", coverage: "vitest run --coverage", lint: "eslint .", "lint:fix": "eslint . --fix", "docs:dev": "vitepress dev docs", "docs:build": "vitepress build docs", "docs:serve": "vitepress serve docs", "docs:preview": "vitepress preview docs", "docs:contributors": "esno scripts/update-contributors.ts" }, xn = { three: ">=0.133", vue: ">=3.4" }, kn = { "@alvarosabu/utils": "^3.2.0", "@vue/devtools-api": "^6.6.3", "@vueuse/core": "^12.5.0" }, Ln = { "@release-it/conventional-changelog": "^10.0.0", "@stackblitz/sdk": "^1.11.0", "@tresjs/cientos": "4.1.0", "@tresjs/eslint-config": "^1.4.0", "@types/three": "^0.173.0", "@typescript-eslint/eslint-plugin": "^8.23.0", "@typescript-eslint/parser": "^8.23.0", "@vitejs/plugin-vue": "^5.2.1", "@vitest/coverage-c8": "^0.33.0", "@vitest/coverage-v8": "^3.0.5", "@vitest/ui": "^3.0.5", "@vue/test-utils": "^2.4.6", eslint: "^9.19.0", "eslint-plugin-vue": "^9.32.0", esno: "^4.8.0", gsap: "^3.12.7", jsdom: "^26.0.0", kolorist: "^1.8.0", ohmyfetch: "^0.4.21", pathe: "^2.0.2", "release-it": "^18.1.2", "rollup-plugin-analyzer": "^4.0.0", "rollup-plugin-copy": "^3.5.0", "rollup-plugin-visualizer": "^5.14.0", sponsorkit: "^16.3.0", three: "^0.173.0", unocss: "^65.4.3", unplugin: "^2.1.2", "unplugin-vue-components": "^28.0.0", vite: "^6.1.0", "vite-plugin-banner": "^0.8.0", "vite-plugin-dts": "4.5.0", "vite-plugin-inspect": "^10.1.0", "vite-plugin-require-transform": "^1.0.21", "vite-svg-loader": "^5.1.0", vitepress: "1.6.3", vitest: "3.0.5", vue: "3.5.13", "vue-demi": "^0.14.10" }, Rn = {
  name: dn,
  type: pn,
  version: mn,
  packageManager: hn,
  description: gn,
  author: vn,
  license: yn,
  repository: _n,
  keywords: wn,
  sideEffects: bn,
  exports: Mn,
  main: Pn,
  module: Cn,
  types: En,
  files: Tn,
  publishConfig: Sn,
  scripts: An,
  peerDependencies: xn,
  dependencies: kn,
  devDependencies: Ln
};
function On(e) {
  const t = { nodes: {}, materials: {} };
  return e && e.traverse((n) => {
    n.name && (t.nodes[n.name] = n), n.material && !t.materials[n.material.name] && (t.materials[n.material.name] = n.material);
  }), t;
}
async function Dn(e, t, n, r, o) {
  const { logError: l } = Q(), s = new e();
  return o && o(s), n && n(s), await new Promise((a, c) => {
    s.load(
      t,
      (i) => {
        const f = i;
        f.scene && Object.assign(f, On(f.scene)), a(f);
      },
      r,
      (i) => {
        l("[useLoader] - Failed to load resource", i), c(i);
      }
    );
  });
}
const Yr = /* @__PURE__ */ fe({
  __name: "component",
  props: {
    loader: {},
    url: {}
  },
  async setup(e) {
    let t, n;
    const r = e, o = ([t, n] = nt(() => Se(Dn(r.loader, r.url))), t = await t, n(), t);
    return (l, s) => rt(l.$slots, "default", { data: W(o) });
  }
});
class jn extends ot.Mesh {
  constructor(...n) {
    super(...n);
    he(this, "type", "HightlightMesh");
    he(this, "createTime");
    this.createTime = Date.now();
  }
  onBeforeRender() {
    const r = (Date.now() - this.createTime) / 1e3, s = 1 + 0.07 * Math.sin(2.5 * r);
    this.scale.set(s, s, s);
  }
}
function Me(e) {
  return typeof e > "u";
}
function de(e) {
  return Array.isArray(e);
}
function Bn(e) {
  return typeof e == "number";
}
function ft(e) {
  return typeof e == "string";
}
function G(e) {
  return typeof e == "function";
}
function H(e) {
  return e === Object(e) && !de(e) && !G(e);
}
function N(e) {
  return H(e) && "isObject3D" in e && !!e.isObject3D;
}
function ze(e) {
  return H(e) && "isCamera" in e && !!e.isCamera;
}
function In(e) {
  return H(e) && "isBufferGeometry" in e && !!e.isBufferGeometry;
}
function $n(e) {
  return H(e) && "isMaterial" in e && !!e.isMaterial;
}
function Hn(e) {
  return H(e) && "isLight" in e && !!e.isLight;
}
function Un(e) {
  return H(e) && "isFog" in e && !!e.isFog;
}
function Fn(e) {
  return H(e) && "isScene" in e && !!e.isScene;
}
function re(e) {
  return N(e) || In(e) || $n(e) || Un(e);
}
function Wn(e) {
  return H(e) && !!e.isPrimitive;
}
const dt = (e, t) => {
  for (const n of Object.keys(t))
    t[n] instanceof Object && Object.assign(t[n], dt(e[n], t[n]));
  return Object.assign(e || {}, t), e;
}, Nn = "html,body,base,head,link,meta,style,title,address,article,aside,footer,header,hgroup,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot", zn = /* @__PURE__ */ Yn(Nn);
function Ge(e) {
  return e && e.nodeType === 1;
}
function oe(e) {
  return e.replace(/-([a-z])/g, (t, n) => n.toUpperCase());
}
const Gn = /\B([A-Z])/g;
function Vn(e) {
  return e.replace(Gn, "-$1").toLowerCase();
}
function Yn(e, t) {
  const n = /* @__PURE__ */ Object.create(null), r = e.split(",");
  for (let o = 0; o < r.length; o++)
    n[r[o]] = !0;
  return t ? (o) => !!n[o.toLowerCase()] : (o) => !!n[o];
}
const Ve = (e, t) => {
  if (!t)
    return;
  const n = Array.isArray(t) ? t : t.match(/([^[.\]])+/g);
  return n == null ? void 0 : n.reduce((r, o) => r && r[o], e);
}, qn = (e, t, n) => {
  const r = Array.isArray(t) ? t : t.match(/([^[.\]])+/g);
  r && r.reduce((o, l, s) => (o[l] === void 0 && (o[l] = {}), s === r.length - 1 && (o[l] = n), o[l]), e);
};
function pt(e, t) {
  if (Ge(e) && Ge(t)) {
    const o = e.attributes, l = t.attributes;
    return o.length !== l.length ? !1 : Array.from(o).every(({ name: s, value: a }) => t.getAttribute(s) === a);
  }
  if (e === t)
    return !0;
  if (e === null || typeof e != "object" || t === null || typeof t != "object")
    return !1;
  const n = Object.keys(e), r = Object.keys(t);
  if (n.length !== r.length)
    return !1;
  for (const o of n)
    if (!r.includes(o) || !pt(e[o], t[o]))
      return !1;
  return !0;
}
function Kn(e, t) {
  if (!Array.isArray(e) || !Array.isArray(t) || e.length !== t.length)
    return !1;
  for (let n = 0; n < e.length; n++)
    if (!pt(e[n], t[n]))
      return !1;
  return !0;
}
const Jn = Array.isArray;
function Qn(e, t, n, r) {
  const o = (c) => {
    if (c.uuid === t)
      return c;
    for (const i of c.children) {
      const f = o(i);
      if (f)
        return f;
    }
  }, l = o(e);
  if (!l) {
    console.warn("Object with UUID not found in the scene.");
    return;
  }
  let s = l;
  for (let c = 0; c < n.length - 1; c++)
    if (s[n[c]] !== void 0)
      s = s[n[c]];
    else {
      console.warn(`Property path is not valid: ${n.join(".")}`);
      return;
    }
  const a = n[n.length - 1];
  s[a] !== void 0 ? s[a] = r : console.warn(`Property path is not valid: ${n.join(".")}`);
}
function Xn(e) {
  const t = new at({
    color: 11003607,
    // Highlight color, e.g., yellow
    transparent: !0,
    opacity: 0.2,
    depthTest: !1,
    // So the highlight is always visible
    side: It
    // To e
  });
  return new jn(e.geometry.clone(), t);
}
function Zn(e) {
  var n;
  let t = e.value;
  return e.value && ((n = e.value) != null && n.isMesh) && (t = e.value.position), Array.isArray(e.value) && (t = new xe(...t)), t;
}
function er(e) {
  return "map" in e;
}
function Ye(e) {
  er(e) && e.map && e.map.dispose(), e.dispose();
}
function mt(e) {
  var n, r;
  if (e.parent && ((n = e.removeFromParent) == null || n.call(e)), delete e.__tres, [...e.children].forEach((o) => mt(o)), !(e instanceof st)) {
    const o = e;
    e && ((r = e.dispose) == null || r.call(e)), o.geometry && o.geometry.dispose(), Array.isArray(o.material) ? o.material.forEach((l) => Ye(l)) : o.material && Ye(o.material);
  }
}
function tr(e, t) {
  let n = 0;
  for (let r = 0; r < e.length; r++)
    t(e[r], r) && (e[n] = e[r], n++);
  return e.length = n, e;
}
function Pe(e, t) {
  let n = e;
  if (t.includes("-")) {
    const r = t.split("-");
    let o = r.shift();
    for (; n && r.length; )
      o in n ? (n = n[o], o = r.shift()) : o = qe(o, r.shift());
    return { target: n, key: qe(o, ...r) };
  } else
    return { target: n, key: t };
}
function qe(...e) {
  return e.map((t, n) => n === 0 ? t : t.charAt(0).toUpperCase() + t.slice(1)).join("");
}
const Ke = /-\d+$/;
function nr(e, t, n) {
  if (ft(n)) {
    if (Ke.test(n)) {
      const l = n.replace(Ke, ""), { target: s, key: a } = Pe(e, l);
      if (!Array.isArray(s[a])) {
        const c = s[a], i = [];
        i.__tresDetach = () => {
          i.every((f) => Me(f)) && (s[a] = c);
        }, s[a] = i;
      }
    }
    const { target: r, key: o } = Pe(e, n);
    t.__tres.previousAttach = r[o], r[o] = J(t);
  } else
    t.__tres.previousAttach = n(e, t);
}
function rr(e, t, n) {
  var r, o, l;
  if (ft(n)) {
    const { target: s, key: a } = Pe(e, n), c = t.__tres.previousAttach;
    c === void 0 ? delete s[a] : s[a] = c, "__tresDetach" in s && s.__tresDetach();
  } else
    (o = (r = t.__tres) == null ? void 0 : r.previousAttach) == null || o.call(r, e, t);
  (l = t.__tres) == null || delete l.previousAttach;
}
function z(e, t, n) {
  const r = e;
  return r.__tres = {
    type: "unknown",
    eventCount: 0,
    root: n,
    handlers: {},
    memoizedProps: {},
    objects: [],
    parent: null,
    previousAttach: null,
    ...t
  }, r.__tres.attach || (r.isMaterial ? r.__tres.attach = "material" : r.isBufferGeometry ? r.__tres.attach = "geometry" : r.isFog && (r.__tres.attach = "fog")), r;
}
function ht(e) {
  var n;
  const t = (n = e == null ? void 0 : e.__tres) == null ? void 0 : n.root;
  t && t.render && t.render.canBeInvalidated.value && t.invalidate();
}
function or(e, t, n) {
  var o;
  if (!G(e.setPixelRatio))
    return;
  let r = 0;
  if (n && de(n)) {
    const l = n;
    if (l.length >= 2) {
      const [s, a] = l;
      r = it.clamp(t, s, a);
    }
  } else Bn(n) ? r = n : r = t;
  r !== ((o = e.getPixelRatio) == null ? void 0 : o.call(e)) && e.setPixelRatio(r);
}
function sr(e, t, n, r, o) {
  const l = [...t.__tres.objects], s = J(t);
  if (e = J(e), s === e)
    return !0;
  const a = z(e, t.__tres ?? {}, o), c = t.parent ?? t.__tres.parent ?? null, i = { ...t.__tres.memoizedProps };
  delete i.object;
  for (const f of l)
    gt(f, o), vt(f, o);
  s.__tres.objects = [], r.remove(t);
  for (const [f, g] of Object.entries(i))
    r.patchProp(a, f, a[f], g);
  n(e), r.insert(t, c);
  for (const f of l)
    r.insert(f, t);
  return !0;
}
function J(e) {
  return Wn(e) ? (e.object.__tres = e.__tres, e.object) : e;
}
function gt(e, t) {
  var r, o, l, s;
  const n = ((r = e.__tres) == null ? void 0 : r.parent) || t.scene.value;
  e.__tres && (e.__tres.parent = null), n && n.__tres && "objects" in n.__tres && tr(n.__tres.objects, (a) => a !== e), (o = e.__tres) != null && o.attach ? rr(n, e, e.__tres.attach) : ((s = (l = e.parent) == null ? void 0 : l.remove) == null || s.call(l, J(e)), e.parent = null);
}
function vt(e, t) {
  var n;
  (n = e.traverse) == null || n.call(e, (r) => {
    var o;
    t.deregisterCamera(r), (o = t.eventManager) == null || o.deregisterPointerMissedObject(r);
  }), t.deregisterCamera(e), ht(e);
}
async function ir(e, t) {
  const n = new $t(t), r = (o) => new Promise((l, s) => {
    n.load(
      o,
      (a) => l(a),
      () => null,
      () => {
        s(new Error("[useTextures] - Failed to load texture"));
      }
    );
  });
  if (Jn(e)) {
    const o = await Promise.all(e.map((l) => r(l)));
    return e.length > 1 ? o : o[0];
  } else {
    const {
      map: o,
      displacementMap: l,
      normalMap: s,
      roughnessMap: a,
      metalnessMap: c,
      aoMap: i,
      alphaMap: f,
      matcap: g
    } = e;
    return {
      map: o ? await r(o) : null,
      displacementMap: l ? await r(l) : null,
      normalMap: s ? await r(s) : null,
      roughnessMap: a ? await r(a) : null,
      metalnessMap: c ? await r(c) : null,
      aoMap: i ? await r(i) : null,
      alphaMap: f ? await r(f) : null,
      matcap: g ? await r(g) : null
    };
  }
}
const qr = /* @__PURE__ */ fe({
  __name: "component",
  props: {
    map: {},
    displacementMap: {},
    normalMap: {},
    roughnessMap: {},
    metalnessMap: {},
    aoMap: {},
    alphaMap: {},
    matcap: {}
  },
  async setup(e) {
    let t, n;
    const r = e, o = ([t, n] = nt(() => Se(ir(r))), t = await t, n(), t);
    return (l, s) => rt(l.$slots, "default", { textures: W(o) });
  }
}), ar = ({ sizes: e }) => {
  const t = I([]), n = q(
    () => t.value[0]
  ), r = (s) => {
    const a = s instanceof Ht ? s : t.value.find((i) => i.uuid === s);
    if (!a)
      return;
    const c = t.value.filter(({ uuid: i }) => i !== a.uuid);
    t.value = [a, ...c];
  }, o = (s, a = !1) => {
    if (ze(s)) {
      const c = s;
      if (t.value.some(({ uuid: i }) => i === c.uuid))
        return;
      a ? r(c) : t.value.push(c);
    }
  }, l = (s) => {
    if (ze(s)) {
      const a = s;
      t.value = t.value.filter(({ uuid: c }) => c !== a.uuid);
    }
  };
  return Ae(() => {
    e.aspectRatio.value && t.value.forEach((s) => {
      !s.manual && (s instanceof be || lr(s)) && (s instanceof be ? s.aspect = e.aspectRatio.value : (s.left = e.width.value * -0.5, s.right = e.width.value * 0.5, s.top = e.height.value * 0.5, s.bottom = e.height.value * -0.5), s.updateProjectionMatrix());
    });
  }), K(() => {
    t.value = [];
  }), {
    camera: n,
    cameras: t,
    registerCamera: o,
    deregisterCamera: l,
    setCameraActive: r
  };
};
function lr(e) {
  return e.hasOwnProperty("isOrthographicCamera") && e.isOrthographicCamera;
}
const Kr = !0, pe = "[TresJS ▲ ■ ●] ";
function cr(...e) {
  typeof e[0] == "string" ? e[0] = pe + e[0] : e.unshift(pe), console.error(...e);
}
function ur(...e) {
  typeof e[0] == "string" ? e[0] = pe + e[0] : e.unshift(pe), console.warn(...e);
}
function fr(e, t) {
}
function Q() {
  return {
    logError: cr,
    logWarning: ur,
    logMessage: fr
  };
}
const Ce = I({}), Ee = (e) => Object.assign(Ce.value, e);
function ye() {
  const e = /* @__PURE__ */ new Map(), t = /* @__PURE__ */ new Set();
  let n = 0, r = !1;
  const o = () => {
    const i = Array.from(e.entries()).sort((f, g) => {
      const u = f[1].priority - g[1].priority;
      return u === 0 ? f[1].addI - g[1].addI : u;
    });
    t.clear(), i.forEach((f) => t.add(f[0]));
  }, l = (i) => {
    e.delete(i), t.delete(i);
  };
  return { on: (i, f = 0) => {
    e.set(i, { priority: f, addI: n++ });
    const g = () => l(i);
    return nn(g), r = !0, {
      off: g
    };
  }, off: l, trigger: (...i) => {
    r && (o(), r = !1), t.forEach((f) => f(...i));
  }, dispose: () => {
    e.clear(), t.clear();
  }, get count() {
    return e.size;
  } };
}
function dr() {
  let e = !0, t = !0, n = !1;
  const r = new lt(!1), o = I(r.running), l = I(!1);
  let s;
  const a = it.generateUUID();
  let c = null;
  const i = ye(), f = ye(), g = ye();
  S();
  let u = {};
  function y(M) {
    u = M;
  }
  function p(M, x, m = 0) {
    switch (x) {
      case "before":
        return i.on(M, m);
      case "render":
        return c || (c = M), f.dispose(), f.on(M);
      case "after":
        return g.on(M, m);
    }
  }
  function _() {
    t && (t = !1, S(), E());
  }
  function d() {
    t = !0, S(), cancelAnimationFrame(s);
  }
  function v() {
    n = !1, S();
  }
  function P() {
    n = !0, S();
  }
  function C() {
    l.value = !0;
  }
  function w() {
    l.value = !1;
  }
  function E() {
    if (!e) {
      s = requestAnimationFrame(E);
      return;
    }
    const M = r.getDelta(), x = r.getElapsedTime(), m = {
      camera: W(u.camera),
      scene: W(u.scene),
      renderer: W(u.renderer),
      raycaster: W(u.raycaster),
      controls: W(u.controls),
      invalidate: u.invalidate,
      advance: u.advance
    }, b = { delta: M, elapsed: x, clock: r, ...m };
    o.value && i.trigger(b), l.value || (f.count ? f.trigger(b) : c && c(b)), o.value && g.trigger(b), s = requestAnimationFrame(E);
  }
  function S() {
    const M = !t && !n;
    r.running !== M && (r.running ? r.stop() : r.start()), o.value = r.running;
  }
  return {
    loopId: a,
    register: (M, x, m) => p(M, x, m),
    start: _,
    stop: d,
    pause: P,
    resume: v,
    pauseRender: C,
    resumeRender: w,
    isRenderPaused: l,
    isActive: o,
    setContext: y,
    setReady: (M) => e = M
  };
}
function ke(e) {
  let t = 0;
  return e.traverse((n) => {
    if (n.isMesh && n.geometry && n.type !== "HightlightMesh") {
      const r = n.geometry, o = r.attributes.position.count * 3 * Float32Array.BYTES_PER_ELEMENT, l = r.index ? r.index.count * Uint32Array.BYTES_PER_ELEMENT : 0, s = r.attributes.normal ? r.attributes.normal.count * 3 * Float32Array.BYTES_PER_ELEMENT : 0, a = r.attributes.uv ? r.attributes.uv.count * 2 * Float32Array.BYTES_PER_ELEMENT : 0, c = o + l + s + a;
      t += c;
    }
  }), t;
}
function pr(e) {
  return (e / 1024).toFixed(2);
}
const mr = Number.parseInt(Ut.replace("dev", ""));
function Jr(e) {
  return typeof e == "number" ? [e, e, e] : e instanceof xe ? [e.x, e.y, e.z] : e;
}
function hr(e) {
  return e instanceof Z ? e : Array.isArray(e) ? new Z(...e) : new Z(e);
}
const se = {
  realistic: {
    shadows: !0,
    physicallyCorrectLights: !0,
    outputColorSpace: Nt,
    toneMapping: ct,
    toneMappingExposure: 3,
    shadowMap: {
      enabled: !0,
      type: Wt
    }
  },
  flat: {
    toneMapping: Ft,
    toneMappingExposure: 1
  }
};
function gr({
  canvas: e,
  options: t,
  contextParts: { sizes: n, render: r, invalidate: o, advance: l }
}) {
  const s = q(() => ({
    alpha: A(t.alpha) ?? !0,
    depth: A(t.depth),
    canvas: rn(e),
    context: A(t.context),
    stencil: A(t.stencil),
    antialias: A(t.antialias) ?? !0,
    precision: A(t.precision),
    powerPreference: A(t.powerPreference),
    premultipliedAlpha: A(t.premultipliedAlpha),
    preserveDrawingBuffer: A(t.preserveDrawingBuffer),
    logarithmicDepthBuffer: A(t.logarithmicDepthBuffer),
    failIfMajorPerformanceCaveat: A(t.failIfMajorPerformanceCaveat)
  })), a = $(new ge(s.value));
  function c() {
    t.renderMode === "on-demand" && o();
  }
  ae(s, () => {
    a.value.dispose(), a.value = new ge(s.value), c();
  }), ae([n.width, n.height], () => {
    a.value.setSize(n.width.value, n.height.value), c();
  }, {
    immediate: !0
  }), ae(() => t.clearColor, c);
  const { pixelRatio: i } = on(), { logError: f } = Q(), u = (() => {
    const p = new ge(), _ = {
      shadowMap: {
        enabled: p.shadowMap.enabled,
        type: p.shadowMap.type
      },
      toneMapping: p.toneMapping,
      toneMappingExposure: p.toneMappingExposure,
      outputColorSpace: p.outputColorSpace
    };
    return p.dispose(), _;
  })(), y = A(t.renderMode);
  return y === "on-demand" && o(), y === "manual" && setTimeout(() => {
    l();
  }, 100), Ae(() => {
    const p = A(t.preset);
    p && (p in se || f(`Renderer Preset must be one of these: ${Object.keys(se).join(", ")}`), dt(a.value, se[p])), or(a.value, i.value, A(t.dpr)), y === "always" && (r.frames.value = Math.max(1, r.frames.value));
    const _ = (P, C) => {
      const w = A(P), E = () => {
        if (p)
          return Ve(se[p], C);
      };
      if (w !== void 0)
        return w;
      const S = E();
      return S !== void 0 ? S : Ve(u, C);
    }, d = (P, C) => qn(a.value, C, _(P, C));
    d(t.shadows, "shadowMap.enabled"), d(t.toneMapping ?? ct, "toneMapping"), d(t.shadowMapType, "shadowMap.type"), mr < 150 && d(!t.useLegacyLights, "physicallyCorrectLights"), d(t.outputColorSpace, "outputColorSpace"), d(t.toneMappingExposure, "toneMappingExposure");
    const v = _(t.clearColor, "clearColor");
    v && a.value.setClearColor(
      v ? hr(v) : new Z(0)
      // default clear color is not easily/efficiently retrievable from three
    );
  }), K(() => {
    a.value.dispose(), a.value.forceContextLoss();
  }), {
    renderer: a
  };
}
function vr(e, t, n = 10) {
  const r = A(e) ? sn() : an(q(() => A(t).parentElement)), o = we(Ne(r.width, n)), l = we(Ne(r.height, n)), s = q(() => o.value / l.value);
  return {
    height: l,
    width: o,
    aspectRatio: s
  };
}
const yr = (e, t) => {
  const n = q(() => t.renderer.value.domElement), r = $([]), { x: o, y: l } = ln({ target: n });
  let s = 0;
  const { width: a, height: c, top: i, left: f } = cn(n), g = ({ x: h, y: T }) => {
    if (n.value)
      return {
        x: (h - f.value) / a.value * 2 - 1,
        y: -((T - i.value) / c.value) * 2 + 1
      };
  }, u = ({ x: h, y: T }) => {
    if (t.camera.value)
      return t.raycaster.value.setFromCamera(new ve(h, T), t.camera.value), r.value = t.raycaster.value.intersectObjects(e.value, !0), r.value;
  }, y = (h) => {
    const T = g({
      x: (h == null ? void 0 : h.clientX) ?? o.value,
      y: (h == null ? void 0 : h.clientY) ?? l.value
    });
    return T ? u(T) || [] : [];
  }, p = D(), _ = D(), d = D(), v = D(), P = D(), C = D(), w = D(), E = D();
  function S(h) {
    const T = {};
    for (const U in h)
      typeof U != "function" && (T[U] = h[U]);
    return T;
  }
  const M = (h, T) => {
    var Be, Ie, $e;
    const U = S(T), ne = new xe(T == null ? void 0 : T.clientX, T == null ? void 0 : T.clientY, 0).unproject((Be = t.camera) == null ? void 0 : Be.value);
    h.trigger({
      ...U,
      intersections: r.value,
      // The unprojectedPoint is wrong, math needs to be fixed
      unprojectedPoint: ne,
      ray: (Ie = t.raycaster) == null ? void 0 : Ie.value.ray,
      camera: ($e = t.camera) == null ? void 0 : $e.value,
      sourceEvent: T,
      delta: s,
      stopPropagating: !1
    });
  };
  let x;
  const m = (h) => {
    y(h), M(d, h), x = h;
  }, b = () => {
    x && m(x);
  };
  let k, L, R;
  const j = (h) => {
    var T;
    k = (T = r.value[0]) == null ? void 0 : T.object, s = 0, L = new ve(
      (h == null ? void 0 : h.clientX) ?? o.value,
      (h == null ? void 0 : h.clientY) ?? l.value
    ), M(P, h);
  };
  let O, V = !1;
  const Re = (h) => {
    var T, U, ne;
    h instanceof PointerEvent && (r.value.length === 0 && M(C, h), k === ((T = r.value[0]) == null ? void 0 : T.object) && (R = new ve(
      (h == null ? void 0 : h.clientX) ?? o.value,
      (h == null ? void 0 : h.clientY) ?? l.value
    ), s = L == null ? void 0 : L.distanceTo(R), h.button === 0 ? (M(p, h), O === ((U = r.value[0]) == null ? void 0 : U.object) ? V = !0 : (O = (ne = r.value[0]) == null ? void 0 : ne.object, V = !1)) : h.button === 2 && M(w, h)), M(v, h));
  }, Oe = (h) => {
    V && (M(_, h), O = void 0, V = !1);
  }, De = (h) => M(d, h), je = (h) => M(E, h);
  return n.value.addEventListener("pointerup", Re), n.value.addEventListener("pointerdown", j), n.value.addEventListener("pointermove", m), n.value.addEventListener("pointerleave", De), n.value.addEventListener("dblclick", Oe), n.value.addEventListener("wheel", je), K(() => {
    n != null && n.value && (n.value.removeEventListener("pointerup", Re), n.value.removeEventListener("pointerdown", j), n.value.removeEventListener("pointermove", m), n.value.removeEventListener("pointerleave", De), n.value.removeEventListener("dblclick", Oe), n.value.removeEventListener("wheel", je));
  }), {
    intersects: r,
    onClick: (h) => p.on(h).off,
    onDblClick: (h) => _.on(h).off,
    onContextMenu: (h) => w.on(h).off,
    onPointerMove: (h) => d.on(h).off,
    onPointerUp: (h) => v.on(h).off,
    onPointerDown: (h) => P.on(h).off,
    onPointerMissed: (h) => C.on(h).off,
    onWheel: (h) => E.on(h).off,
    forceUpdate: b
  };
};
function _e(e, t) {
  if (Array.isArray(e))
    for (const n of e)
      n(t);
  typeof e == "function" && e(t);
}
function _r(e, t, n) {
  var x;
  const r = $(), o = $();
  e && (r.value = e), t && (o.value = t);
  const l = (m) => {
    var b;
    return ((b = m.__tres) == null ? void 0 : b.eventCount) > 0;
  }, s = (m) => {
    var b;
    return ((b = m.children) == null ? void 0 : b.some((k) => s(k))) || l(m);
  }, a = $(((x = r.value) == null ? void 0 : x.children).filter(s) || []);
  function c(m, b) {
    const k = [], L = () => b.stopPropagating = !0;
    b.stopPropagation = L;
    for (const R of b == null ? void 0 : b.intersections) {
      if (b.stopPropagating)
        return;
      b = { ...b, ...R };
      const { object: j } = R;
      b.eventObject = j, _e(j[m], b), k.push(j);
      let O = j.parent;
      for (; O !== null && !b.stopPropagating && !k.includes(O); )
        b.eventObject = O, _e(O[m], b), k.push(O), O = O.parent;
      const V = Vn(m.slice(2));
      n(V, { intersection: R, event: b });
    }
  }
  const {
    onClick: i,
    onDblClick: f,
    onContextMenu: g,
    onPointerMove: u,
    onPointerDown: y,
    onPointerUp: p,
    onPointerMissed: _,
    onWheel: d,
    forceUpdate: v
  } = yr(a, t);
  p((m) => c("onPointerUp", m)), y((m) => c("onPointerDown", m)), i((m) => c("onClick", m)), f((m) => c("onDoubleClick", m)), g((m) => c("onContextMenu", m)), d((m) => c("onWheel", m));
  let P = [];
  u((m) => {
    const b = m.intersections.map(({ object: L }) => L), k = m.intersections;
    P.forEach(({ object: L }) => {
      b.includes(L) || (m.intersections = P, c("onPointerLeave", m), c("onPointerOut", m));
    }), m.intersections = k, m.intersections.forEach(({ object: L }) => {
      P.includes(L) || (c("onPointerEnter", m), c("onPointerOver", m));
    }), c("onPointerMove", m), P = m.intersections;
  });
  const C = [];
  _((m) => {
    const b = () => m.stopPropagating = !0;
    m.stopPropagation = b, C.forEach((k) => {
      m.stopPropagating || (m.eventObject = k, _e(k.onPointerMissed, m));
    }), n("pointer-missed", { event: m });
  });
  function w(m) {
    re(m) && N(m) && a.value.push(m);
  }
  function E(m) {
    if (re(m) && N(m)) {
      const b = a.value.indexOf(m);
      b > -1 && a.value.splice(b, 1);
    }
  }
  function S(m) {
    re(m) && N(m) && m.onPointerMissed && C.push(m);
  }
  function M(m) {
    if (re(m) && N(m)) {
      const b = C.indexOf(m);
      b > -1 && C.splice(b, 1);
    }
  }
  return t.eventManager = {
    forceUpdate: v,
    registerObject: w,
    deregisterObject: E,
    registerPointerMissedObject: S,
    deregisterPointerMissedObject: M
  }, {
    forceUpdate: v,
    registerObject: w,
    deregisterObject: E,
    registerPointerMissedObject: S,
    deregisterPointerMissedObject: M
  };
}
function wr(e, t, n = 100) {
  n = n <= 0 ? 100 : n;
  const r = D(), o = /* @__PURE__ */ new Set();
  let l = !1, s = !1, a = null;
  function c() {
    a && clearTimeout(a), !s && !l && e() ? (r.trigger(t), o.forEach((u) => u()), o.clear(), l = !0) : !s && !l && (a = setTimeout(c, n));
  }
  function i() {
    s = !0, a && clearTimeout(a);
  }
  c();
  const f = (u, ...y) => {
    u(...y);
  };
  return {
    on: (u) => {
      if (l)
        return f(u, t), { off: () => {
        } };
      {
        const y = r.on(u);
        return o.add(y.off), r.on(u);
      }
    },
    off: r.off,
    trigger: r.trigger,
    clear: r.clear,
    cancel: i
  };
}
const ee = /* @__PURE__ */ new WeakMap();
function yt(e) {
  if (e = e || me(), ee.has(e))
    return ee.get(e);
  const t = 100, n = Date.now(), l = wr(() => {
    if (Date.now() - n >= t)
      return !0;
    {
      const s = e.renderer.value, a = (s == null ? void 0 : s.domElement) || { width: 0, height: 0 };
      return !!(s && a.width > 0 && a.height > 0);
    }
  }, e);
  return ee.set(e, l), l;
}
function Qr(e) {
  const t = me();
  if (t)
    return ee.has(t) ? ee.get(t).on(e) : yt(t).on(e);
}
function br({
  scene: e,
  canvas: t,
  windowSize: n,
  rendererOptions: r,
  emit: o
}) {
  const l = $(e), s = vr(n, t), {
    camera: a,
    cameras: c,
    registerCamera: i,
    deregisterCamera: f,
    setCameraActive: g
  } = ar({ sizes: s }), u = {
    mode: I(r.renderMode || "always"),
    priority: I(0),
    frames: I(0),
    maxFrames: 60,
    canBeInvalidated: q(() => u.mode.value === "on-demand" && u.frames.value === 0)
  };
  function y(R = 1) {
    r.renderMode === "on-demand" && (u.frames.value = Math.min(u.maxFrames, u.frames.value + R));
  }
  function p() {
    r.renderMode === "manual" && (u.frames.value = 1);
  }
  const { renderer: _ } = gr(
    {
      canvas: t,
      options: r,
      // TODO: replace contextParts with full ctx at https://github.com/Tresjs/tres/issues/516
      contextParts: { sizes: s, render: u, invalidate: y, advance: p }
    }
  ), d = {
    sizes: s,
    scene: l,
    camera: a,
    cameras: we(c),
    renderer: _,
    raycaster: $(new zt()),
    controls: I(null),
    perf: {
      maxFrames: 160,
      fps: {
        value: 0,
        accumulator: []
      },
      memory: {
        currentMem: 0,
        allocatedMem: 0,
        accumulator: []
      }
    },
    render: u,
    advance: p,
    extend: Ee,
    invalidate: y,
    registerCamera: i,
    setCameraActive: g,
    deregisterCamera: f,
    loop: dr()
  };
  le("useTres", d), d.scene.value.__tres = {
    root: d
  }, d.loop.register(() => {
    a.value && u.frames.value > 0 && (_.value.render(e, a.value), o("render", d.renderer.value)), u.priority.value = 0, u.mode.value === "always" ? u.frames.value = 1 : u.frames.value = Math.max(0, u.frames.value - 1);
  }, "render");
  const { on: v, cancel: P } = yt(d);
  d.loop.setReady(!1), d.loop.start(), v(() => {
    o("ready", d), d.loop.setReady(!0), _r(e, d, o);
  }), K(() => {
    P(), d.loop.stop();
  });
  const C = 100, w = un({ every: C }), { isSupported: E, memory: S } = fn({ interval: C }), M = 160;
  let x = performance.now();
  const m = ({ timestamp: R }) => {
    d.scene.value && (d.perf.memory.allocatedMem = ke(d.scene.value)), R - x >= C && (x = R, d.perf.fps.accumulator.push(w.value), d.perf.fps.accumulator.length > M && d.perf.fps.accumulator.shift(), d.perf.fps.value = w.value, E.value && S.value && (d.perf.memory.accumulator.push(S.value.usedJSHeapSize / 1024 / 1024), d.perf.memory.accumulator.length > M && d.perf.memory.accumulator.shift(), d.perf.memory.currentMem = d.perf.memory.accumulator.reduce((j, O) => j + O, 0) / d.perf.memory.accumulator.length));
  };
  let b = 0;
  const k = 1, { pause: L } = ut(({ delta: R }) => {
    window.__TRES__DEVTOOLS__ && (m({ timestamp: performance.now() }), b += R, b >= k && (window.__TRES__DEVTOOLS__.cb(d), b = 0));
  }, { immediate: !0 });
  return K(() => {
    L();
  }), d;
}
function me() {
  const e = St("useTres");
  if (!e)
    throw new Error("useTresContext must be used together with useTresContextProvider");
  return e;
}
const Xr = me;
function Zr() {
  const {
    camera: e,
    scene: t,
    renderer: n,
    loop: r,
    raycaster: o,
    controls: l,
    invalidate: s,
    advance: a
  } = me();
  r.setContext({
    camera: e,
    scene: t,
    renderer: n,
    raycaster: o,
    controls: l,
    invalidate: s,
    advance: a
  });
  function c(g, u = 0) {
    return r.register(g, "before", u);
  }
  function i(g) {
    return r.register(g, "render");
  }
  function f(g, u = 0) {
    return r.register(g, "after", u);
  }
  return {
    pause: r.pause,
    resume: r.resume,
    pauseRender: r.pauseRender,
    resumeRender: r.resumeRender,
    isActive: r.isActive,
    onBeforeRender: c,
    render: i,
    onAfterRender: f
  };
}
const _t = D(), wt = D(), Le = D(), te = new lt();
let ce = 0, ue = 0;
const { pause: Mr, resume: Je, isActive: Pr } = ut(
  () => {
    _t.trigger({ delta: ce, elapsed: ue, clock: te }), wt.trigger({ delta: ce, elapsed: ue, clock: te }), Le.trigger({ delta: ce, elapsed: ue, clock: te });
  },
  { immediate: !1 }
);
Le.on(() => {
  ce = te.getDelta(), ue = te.getElapsedTime();
});
let Qe = !1;
const eo = () => (Qe || (Qe = !0, Je()), {
  onBeforeLoop: _t.on,
  onLoop: wt.on,
  onAfterLoop: Le.on,
  pause: Mr,
  resume: Je,
  isActive: Pr
});
function to() {
  const { logWarning: e } = Q();
  function t(l, s, a) {
    let c = null;
    return l.traverse((i) => {
      i[s] === a && (c = i);
    }), c || e(`Child with ${s} '${a}' not found.`), c;
  }
  function n(l, s, a) {
    const c = [];
    return l.traverse((i) => {
      i[s].includes(a) && c.push(i);
    }), c.length || e(`Children with ${s} '${a}' not found.`), c;
  }
  function r(l, s) {
    return t(l, "name", s);
  }
  function o(l, s) {
    return n(l, "name", s);
  }
  return {
    seek: t,
    seekByName: r,
    seekAll: n,
    seekAllByName: o
  };
}
function Cr(e, t = {}, n = {}) {
  let r = e;
  const o = (a) => {
    r = a;
  };
  let l = new Proxy({}, {});
  const s = {
    has(a, c) {
      return c in t || c in r;
    },
    get(a, c, i) {
      return c in t ? t[c](r) : r[c];
    },
    set(a, c, i) {
      const f = n[c];
      return f && typeof f == "function" ? f(i, r, l, o) : r[c] = i, !0;
    }
  };
  return l = new Proxy({}, s), l;
}
const { logError: Xe } = Q(), Ze = [
  "onClick",
  "onContextMenu",
  "onPointerMove",
  "onPointerEnter",
  "onPointerLeave",
  "onPointerOver",
  "onPointerOut",
  "onDoubleClick",
  "onPointerDown",
  "onPointerUp",
  "onPointerCancel",
  "onPointerMissed",
  "onLostPointerCapture",
  "onWheel"
], Er = (e) => {
  const t = e.scene.value;
  function n(i, f, g, u) {
    if (u || (u = {}), u.args || (u.args = []), i === "template" || zn(i))
      return null;
    let y = i.replace("Tres", ""), p;
    if (i === "primitive") {
      (!H(u.object) || At(u.object)) && Xe(
        "Tres primitives need an 'object' prop, whose value is an object or shallowRef<object>"
      ), y = u.object.type;
      const _ = {};
      p = Cr(
        u.object,
        {
          object: (v) => v,
          isPrimitive: () => !0,
          __tres: () => _
        },
        {
          object: (v, P, C, w) => {
            sr(v, C, w, { patchProp: l, remove: o, insert: r }, e);
          },
          __tres: (v) => {
            Object.assign(_, v);
          }
        }
      );
    } else {
      const _ = Ce.value[y];
      _ || Xe(
        `${y} is not defined on the THREE namespace. Use extend to add it to the catalog.`
      ), p = new _(...u.args);
    }
    return p ? (p.isCamera && (u != null && u.position || p.position.set(3, 3, 3), u != null && u.lookAt || p.lookAt(0, 0, 0)), p = z(p, {
      ...p.__tres,
      type: y,
      memoizedProps: u,
      eventCount: 0,
      primitive: i === "primitive",
      attach: u.attach
    }, e), p) : null;
  }
  function r(i, f) {
    var y, p, _;
    if (!i)
      return;
    f = f || t;
    const g = i.__tres ? i : z(i, {}, e), u = f.__tres ? f : z(f, {}, e);
    i = J(g), f = J(u), i.__tres && ((y = i.__tres) == null ? void 0 : y.eventCount) > 0 && ((p = e.eventManager) == null || p.registerObject(i)), e.registerCamera(i), (_ = e.eventManager) == null || _.registerPointerMissedObject(i), g.__tres.attach ? nr(u, g, g.__tres.attach) : N(i) && N(u) && (u.add(i), i.dispatchEvent({ type: "added" })), g.__tres.parent = u, u.__tres.objects && !u.__tres.objects.includes(g) && u.__tres.objects.push(g);
  }
  function o(i, f) {
    var p, _, d, v;
    if (!i)
      return;
    i != null && i.__tres && ((p = i.__tres) == null ? void 0 : p.eventCount) > 0 && ((_ = e.eventManager) == null || _.deregisterObject(i)), f = Me(f) ? "default" : f;
    const g = (d = i.__tres) == null ? void 0 : d.dispose;
    Me(g) || (g === null ? f = !1 : f = g);
    const u = (v = i.__tres) == null ? void 0 : v.primitive, y = f === "default" ? !u : !!f;
    if (i.__tres && "objects" in i.__tres && [...i.__tres.objects].forEach((P) => o(P, f)), y && i.children && [...i.children].forEach((P) => o(P, f)), gt(i, e), vt(i, e), y && !Fn(i)) {
      if (G(f))
        f(i);
      else if (G(i.dispose))
        try {
          i.dispose();
        } catch {
        }
    }
    "__tres" in i && delete i.__tres;
  }
  function l(i, f, g, u) {
    var P, C;
    if (!i)
      return;
    let y = i, p = f;
    if (i.__tres && (i.__tres.memoizedProps[f] = u), f === "attach") {
      const w = ((P = i.__tres) == null ? void 0 : P.parent) || i.parent;
      o(i), z(i, { attach: u }, e), w && r(i, w);
      return;
    }
    if (f === "dispose") {
      i.__tres || (i = z(i, {}, e)), i.__tres.dispose = u;
      return;
    }
    if (N(i) && p === "blocks-pointer-events") {
      u || u === "" ? i[p] = u : delete i[p];
      return;
    }
    Ze.includes(f) && i.__tres && (i.__tres.eventCount += 1);
    let _ = oe(p), d = y == null ? void 0 : y[_];
    if (p === "args") {
      const w = i, E = g ?? [], S = u ?? [], M = ((C = i.__tres) == null ? void 0 : C.type) || i.type;
      M && E.length && !Kn(E, S) && (y = Object.assign(
        w,
        new Ce.value[M](...u)
      ));
      return;
    }
    if (y.type === "BufferGeometry") {
      if (p === "args")
        return;
      y.setAttribute(
        oe(p),
        new Vt(...u)
      );
      return;
    }
    if (p.includes("-") && d === void 0) {
      const w = p.split("-");
      d = w.reduce((E, S) => E[oe(S)], y), p = w.pop(), _ = p, d != null && d.set || (y = w.reduce((E, S) => E[oe(S)], y));
    }
    let v = u;
    if (v === "" && (v = !0), G(d)) {
      Ze.includes(f) || (de(v) ? i[_](...v) : i[_](v)), _.startsWith("on") && G(v) && (y[_] = v);
      return;
    }
    !(d != null && d.set) && !G(d) ? y[_] = v : d.constructor === v.constructor && (d != null && d.copy) ? d == null || d.copy(v) : de(v) ? d.set(...v) : !d.isColor && d.setScalar ? d.setScalar(v) : d.set(v), ht(i);
  }
  function s(i) {
    var f;
    return ((f = i == null ? void 0 : i.__tres) == null ? void 0 : f.parent) || null;
  }
  function a(i) {
    const f = z(new Gt(), { type: "Comment" }, e);
    return f.name = i, f;
  }
  function c(i) {
    var y;
    const f = s(i), g = ((y = f == null ? void 0 : f.__tres) == null ? void 0 : y.objects) || [], u = g.indexOf(i);
    return u < 0 || u >= g.length - 1 ? null : g[u + 1];
  }
  return {
    insert: r,
    remove: o,
    createElement: n,
    patchProp: l,
    parentNode: s,
    createText: () => void 0,
    createComment: a,
    setText: () => void 0,
    setElementText: () => void 0,
    nextSibling: c,
    querySelector: () => void 0,
    setScopeId: () => void 0,
    cloneNode: () => void 0,
    insertStaticContent: () => void 0
  };
};
function Tr() {
  return bt().__VUE_DEVTOOLS_GLOBAL_HOOK__;
}
function bt() {
  return typeof navigator < "u" && typeof window < "u" ? window : typeof globalThis < "u" ? globalThis : {};
}
const Sr = typeof Proxy == "function", Ar = "devtools-plugin:setup", xr = "plugin:settings:set";
let Y, Te;
function kr() {
  var e;
  return Y !== void 0 || (typeof window < "u" && window.performance ? (Y = !0, Te = window.performance) : typeof globalThis < "u" && (!((e = globalThis.perf_hooks) === null || e === void 0) && e.performance) ? (Y = !0, Te = globalThis.perf_hooks.performance) : Y = !1), Y;
}
function Lr() {
  return kr() ? Te.now() : Date.now();
}
class Rr {
  constructor(t, n) {
    this.target = null, this.targetQueue = [], this.onQueue = [], this.plugin = t, this.hook = n;
    const r = {};
    if (t.settings)
      for (const s in t.settings) {
        const a = t.settings[s];
        r[s] = a.defaultValue;
      }
    const o = `__vue-devtools-plugin-settings__${t.id}`;
    let l = Object.assign({}, r);
    try {
      const s = localStorage.getItem(o), a = JSON.parse(s);
      Object.assign(l, a);
    } catch {
    }
    this.fallbacks = {
      getSettings() {
        return l;
      },
      setSettings(s) {
        try {
          localStorage.setItem(o, JSON.stringify(s));
        } catch {
        }
        l = s;
      },
      now() {
        return Lr();
      }
    }, n && n.on(xr, (s, a) => {
      s === this.plugin.id && this.fallbacks.setSettings(a);
    }), this.proxiedOn = new Proxy({}, {
      get: (s, a) => this.target ? this.target.on[a] : (...c) => {
        this.onQueue.push({
          method: a,
          args: c
        });
      }
    }), this.proxiedTarget = new Proxy({}, {
      get: (s, a) => this.target ? this.target[a] : a === "on" ? this.proxiedOn : Object.keys(this.fallbacks).includes(a) ? (...c) => (this.targetQueue.push({
        method: a,
        args: c,
        resolve: () => {
        }
      }), this.fallbacks[a](...c)) : (...c) => new Promise((i) => {
        this.targetQueue.push({
          method: a,
          args: c,
          resolve: i
        });
      })
    });
  }
  async setRealTarget(t) {
    this.target = t;
    for (const n of this.onQueue)
      this.target.on[n.method](...n.args);
    for (const n of this.targetQueue)
      n.resolve(await this.target[n.method](...n.args));
  }
}
function Or(e, t) {
  const n = e, r = bt(), o = Tr(), l = Sr && n.enableEarlyProxy;
  if (o && (r.__VUE_DEVTOOLS_PLUGIN_API_AVAILABLE__ || !l))
    o.emit(Ar, e, t);
  else {
    const s = l ? new Rr(n, o) : null;
    (r.__VUE_DEVTOOLS_PLUGINS__ = r.__VUE_DEVTOOLS_PLUGINS__ || []).push({
      pluginDescriptor: n,
      setupFn: t,
      proxy: s
    }), s && t(s.proxiedTarget);
  }
}
function Dr(e, t) {
  const n = `▲ ■ ●${e}`;
  typeof et == "function" ? et(n, t) : console.log(n);
}
function et(e, t) {
  throw new Error(e + t);
}
const Mt = (e) => {
  const t = {
    id: e.uuid,
    label: e.type,
    children: [],
    tags: []
  };
  e.name !== "" && t.tags.push({
    label: e.name,
    textColor: 5750629,
    backgroundColor: 15793395
  });
  const n = ke(e);
  return n > 0 && t.tags.push({
    label: `${pr(n)} KB`,
    textColor: 15707189,
    backgroundColor: 16775644,
    tooltip: "Memory usage"
  }), e.type.includes("Light") && (Hn(e) && t.tags.push({
    label: `${e.intensity}`,
    textColor: 9738662,
    backgroundColor: 16316922,
    tooltip: "Intensity"
  }), t.tags.push({
    label: `#${new Z(e.color).getHexString()}`,
    textColor: 9738662,
    backgroundColor: 16316922,
    tooltip: "Color"
  })), e.type.includes("Camera") && (t.tags.push({
    label: `${e.fov}°`,
    textColor: 9738662,
    backgroundColor: 16316922,
    tooltip: "Field of view"
  }), t.tags.push({
    label: `x: ${Math.round(e.position.x)} y: ${Math.round(e.position.y)} z: ${Math.round(e.position.z)}`,
    textColor: 9738662,
    backgroundColor: 16316922,
    tooltip: "Position"
  })), t;
};
function Pt(e, t, n = "") {
  e.children.forEach((r) => {
    if (r.type === "HightlightMesh" || n && !r.type.includes(n) && !r.name.includes(n))
      return;
    const o = Mt(r);
    t.children.push(o), Pt(r, o, n);
  });
}
const jr = [], X = "tres:inspector", Br = Se({
  sceneGraph: null
});
function Ir(e, t) {
  Or(
    {
      id: "dev.esm.tres",
      label: "TresJS 🪐",
      logo: "https://raw.githubusercontent.com/Tresjs/tres/main/public/favicon.svg",
      packageName: "tresjs",
      homepage: "https://tresjs.org",
      componentStateTypes: jr,
      app: e
    },
    (n) => {
      typeof n.now != "function" && Dr(
        "You seem to be using an outdated version of Vue Devtools. Are you still using the Beta release instead of the stable one? You can find the links at https://devtools.vuejs.org/guide/installation.html."
      ), n.addInspector({
        id: X,
        label: "TresJS 🪐",
        icon: "account_tree",
        treeFilterPlaceholder: "Search instances"
      }), setInterval(() => {
        n.sendInspectorTree(X);
      }, 1e3), setInterval(() => {
        n.notifyComponentUpdate();
      }, 5e3), n.on.getInspectorTree((l) => {
        if (l.inspectorId === X) {
          const s = Mt(t.scene.value);
          Pt(t.scene.value, s, l.filter), Br.sceneGraph = s, l.rootNodes = [s];
        }
      });
      let r = null, o = null;
      n.on.getInspectorState((l) => {
        var s;
        if (l.inspectorId === X) {
          const [a] = t.scene.value.getObjectsByProperty("uuid", l.nodeId);
          if (!a)
            return;
          if (o && r && r.parent && o.remove(r), a.isMesh) {
            const c = Xn(a);
            a.add(c), r = c, o = a;
          }
          l.state = {
            object: Object.entries(a).map(([c, i]) => c === "children" ? { key: c, value: i.filter((f) => f.type !== "HightlightMesh") } : { key: c, value: i, editable: !0 }).filter(({ key: c }) => c !== "parent")
          }, a.isScene && (l.state = {
            ...l.state,
            state: [
              {
                key: "Scene Info",
                value: {
                  objects: a.children.length,
                  memory: ke(a),
                  calls: t.renderer.value.info.render.calls,
                  triangles: t.renderer.value.info.render.triangles,
                  points: t.renderer.value.info.render.points,
                  lines: t.renderer.value.info.render.lines
                }
              },
              {
                key: "Programs",
                value: ((s = t.renderer.value.info.programs) == null ? void 0 : s.map((c) => ({
                  ...c,
                  programName: c.name
                }))) || []
              }
            ]
          });
        }
      }), n.on.editInspectorState((l) => {
        l.inspectorId === X && Qn(t.scene.value, l.nodeId, l.path, l.state.value);
      });
    }
  );
}
const $r = ["data-scene", "data-tres"], Hr = /* @__PURE__ */ fe({
  __name: "TresCanvas",
  props: {
    shadows: { type: Boolean, default: void 0 },
    clearColor: {},
    toneMapping: {},
    shadowMapType: {},
    useLegacyLights: { type: Boolean, default: void 0 },
    outputColorSpace: {},
    toneMappingExposure: {},
    renderMode: { default: "always" },
    dpr: {},
    camera: {},
    preset: {},
    windowSize: { type: Boolean, default: void 0 },
    enableProvideBridge: { type: Boolean, default: !0 },
    context: {},
    alpha: { type: Boolean, default: void 0 },
    premultipliedAlpha: { type: Boolean },
    antialias: { type: Boolean, default: void 0 },
    stencil: { type: Boolean, default: void 0 },
    preserveDrawingBuffer: { type: Boolean, default: void 0 },
    powerPreference: {},
    depth: { type: Boolean, default: void 0 },
    failIfMajorPerformanceCaveat: { type: Boolean, default: void 0 },
    precision: {},
    logarithmicDepthBuffer: { type: Boolean, default: void 0 },
    reverseDepthBuffer: { type: Boolean }
  },
  emits: [
    "render",
    "click",
    "double-click",
    "context-menu",
    "pointer-move",
    "pointer-up",
    "pointer-down",
    "pointer-enter",
    "pointer-leave",
    "pointer-over",
    "pointer-out",
    "pointer-missed",
    "wheel",
    "ready"
  ],
  setup(e, { expose: t, emit: n }) {
    const r = e, o = n, l = xt(), s = I(), a = $(new st()), c = He();
    Ee(ot);
    const i = (p, _ = !1) => fe({
      setup() {
        var C;
        const d = (C = He()) == null ? void 0 : C.appContext;
        d && (d.app = c == null ? void 0 : c.appContext.app);
        const v = {};
        function P(w) {
          w && (w.parent && P(w.parent), w.provides && Object.assign(v, w.provides));
        }
        return c != null && c.parent && r.enableProvideBridge && (P(c.parent), Reflect.ownKeys(v).forEach((w) => {
          le(w, v[w]);
        })), le("useTres", p), le("extend", Ee), typeof window < "u" && Ir(d == null ? void 0 : d.app, p), () => Ue(Bt, null, _ ? [] : l.default());
      }
    }), f = (p, _ = !1) => {
      const d = i(p, _), { render: v } = jt(Er(p));
      v(Ue(d), a.value);
    }, g = (p, _ = !1) => {
      mt(p.scene.value), _ && (p.renderer.value.dispose(), p.renderer.value.renderLists.dispose(), p.renderer.value.forceContextLoss()), a.value.__tres = {
        root: p
      };
    }, u = $(null);
    t({ context: u, dispose: () => g(u.value, !0) });
    const y = () => {
      g(u.value), f(u.value, !0);
    };
    return kt(() => {
      const p = s;
      u.value = br({
        scene: a.value,
        canvas: p,
        windowSize: r.windowSize ?? !1,
        rendererOptions: r,
        emit: o
      });
      const { registerCamera: _, camera: d, cameras: v, deregisterCamera: P } = u.value;
      f(u.value);
      const C = () => {
        const w = new be(
          45,
          window.innerWidth / window.innerHeight,
          0.1,
          1e3
        );
        w.position.set(3, 3, 3), w.lookAt(0, 0, 0), _(w);
        const E = Ae(() => {
          v.value.length >= 2 && (w.removeFromParent(), P(w), E == null || E());
        });
      };
      ae(
        () => r.camera,
        (w, E) => {
          w && _(w), E && (E.removeFromParent(), P(E));
        },
        {
          immediate: !0
        }
      ), d.value || C();
    }), K(y), (p, _) => (Rt(), Lt("canvas", {
      ref_key: "canvas",
      ref: s,
      "data-scene": a.value.uuid,
      class: Dt(p.$attrs.class),
      "data-tres": `tresjs ${W(Rn).version}`,
      style: Ot({
        display: "block",
        width: "100%",
        height: "100%",
        position: p.windowSize ? "fixed" : "relative",
        top: 0,
        left: 0,
        pointerEvents: "auto",
        touchAction: "none",
        ...p.$attrs.style
      })
    }, null, 14, $r));
  }
}), Ur = [
  "TresCanvas",
  "TresLeches",
  "TresScene"
], no = {
  template: {
    compilerOptions: {
      isCustomElement: (e) => e.startsWith("Tres") && !Ur.includes(e) || e === "primitive"
    }
  }
}, { logWarning: Fr } = Q();
let B = null;
const ro = {
  updated: (e, t) => {
    var o;
    const n = Zn(t);
    if (!n) {
      Fr(`v-distance-to: problem with binding value: ${t.value}`);
      return;
    }
    B && (B.dispose(), e.parent.remove(B));
    const r = n.clone().sub(e.position);
    r.normalize(), B = new Yt(r, e.position, e.position.distanceTo(n), 16776960), e.parent.add(B), console.table(
      [
        ["Distance:", e.position.distanceTo(n)],
        [`origin: ${e.name || e.type}`, `x:${e.position.x}, y:${e.position.y}, z:${(o = e.position) == null ? void 0 : o.z}`],
        [`Destiny: ${e.name || e.type}`, `x:${n.x}, y:${n.y}, z:${n == null ? void 0 : n.z}`]
      ]
    );
  },
  unmounted: (e) => {
    B == null || B.dispose(), e.parent && e.parent.remove(B);
  }
};
class Ct extends qt {
  constructor(t, n) {
    const r = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0, 1, 1, 0], o = new Fe();
    o.setAttribute("position", new We(r, 3)), o.computeBoundingSphere();
    const l = new Kt({ fog: !1 });
    super(o, l), this.light = t, this.color = n, this.type = "RectAreaLightHelper";
    const s = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0], a = new Fe();
    a.setAttribute("position", new We(s, 3)), a.computeBoundingSphere(), this.add(new Jt(a, new at({ side: Qt, fog: !1 })));
  }
  updateMatrixWorld() {
    if (this.scale.set(0.5 * this.light.width, 0.5 * this.light.height, 1), this.color !== void 0)
      this.material.color.set(this.color), this.children[0].material.color.set(this.color);
    else {
      this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);
      const t = this.material.color, n = Math.max(t.r, t.g, t.b);
      n > 1 && t.multiplyScalar(1 / n), this.children[0].material.color.copy(this.material.color);
    }
    this.matrixWorld.extractRotation(this.light.matrixWorld).scale(this.scale).copyPosition(this.light.matrixWorld), this.children[0].matrixWorld.copy(this.matrixWorld);
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose(), this.children[0].geometry.dispose(), this.children[0].material.dispose();
  }
}
const { logWarning: tt } = Q();
let ie, F;
const Wr = {
  DirectionalLight: tn,
  PointLight: en,
  SpotLight: Zt,
  HemisphereLight: Xt,
  RectAreaLight: Ct
}, oo = {
  mounted: (e) => {
    if (!e.isLight) {
      tt(`${e.type} is not a light`);
      return;
    }
    ie = Wr[e.type], e.parent.add(new ie(e, 1, e.color.getHex()));
  },
  updated: (e) => {
    F = e.parent.children.find((t) => t instanceof ie), !(F instanceof Ct) && F.update();
  },
  unmounted: (e) => {
    if (!e.isLight) {
      tt(`${e.type} is not a light`);
      return;
    }
    F = e.parent.children.find((t) => t instanceof ie), F && F.dispose && F.dispose(), e.parent && e.parent.remove(F);
  }
}, so = {
  mounted: (e, t) => {
    if (t.arg) {
      console.log(`v-log:${t.arg}`, e[t.arg]);
      return;
    }
    console.log("v-log", e);
  }
}, io = {
  install(e) {
    e.component("TresCanvas", Hr);
  }
};
export {
  Hr as TresCanvas,
  Yr as UseLoader,
  qr as UseTexture,
  Ce as catalogue,
  dr as createRenderLoop,
  io as default,
  mt as dispose,
  Ee as extend,
  Kr as isProd,
  hr as normalizeColor,
  Jr as normalizeVectorFlexibleParam,
  Qr as onTresReady,
  no as templateCompilerOptions,
  On as traverseObjects,
  ar as useCamera,
  Dn as useLoader,
  Q as useLogger,
  Zr as useLoop,
  yr as useRaycaster,
  eo as useRenderLoop,
  gr as useRenderer,
  to as useSeek,
  ir as useTexture,
  Xr as useTres,
  me as useTresContext,
  br as useTresContextProvider,
  _r as useTresEventManager,
  ro as vDistanceTo,
  oo as vLightHelper,
  so as vLog
};
